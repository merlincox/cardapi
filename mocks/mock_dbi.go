// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/merlincox/cardapi/db (interfaces: Dbi)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/merlincox/cardapi/models"
	reflect "reflect"
)

// MockDbi is a mock of Dbi interface
type MockDbi struct {
	ctrl     *gomock.Controller
	recorder *MockDbiMockRecorder
}

// MockDbiMockRecorder is the mock recorder for MockDbi
type MockDbiMockRecorder struct {
	mock *MockDbi
}

// NewMockDbi creates a new mock instance
func NewMockDbi(ctrl *gomock.Controller) *MockDbi {
	mock := &MockDbi{ctrl: ctrl}
	mock.recorder = &MockDbiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbi) EXPECT() *MockDbiMockRecorder {
	return m.recorder
}

// AddCard mocks base method
func (m *MockDbi) AddCard(arg0 int) (models.Card, models.ApiError) {
	ret := m.ctrl.Call(m, "AddCard", arg0)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard
func (mr *MockDbiMockRecorder) AddCard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockDbi)(nil).AddCard), arg0)
}

// AddCustomer mocks base method
func (m *MockDbi) AddCustomer(arg0 string) (models.Customer, models.ApiError) {
	ret := m.ctrl.Call(m, "AddCustomer", arg0)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// AddCustomer indicates an expected call of AddCustomer
func (mr *MockDbiMockRecorder) AddCustomer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomer", reflect.TypeOf((*MockDbi)(nil).AddCustomer), arg0)
}

// AddVendor mocks base method
func (m *MockDbi) AddVendor(arg0 string) (models.Vendor, models.ApiError) {
	ret := m.ctrl.Call(m, "AddVendor", arg0)
	ret0, _ := ret[0].(models.Vendor)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// AddVendor indicates an expected call of AddVendor
func (mr *MockDbiMockRecorder) AddVendor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVendor", reflect.TypeOf((*MockDbi)(nil).AddVendor), arg0)
}

// Authorise mocks base method
func (m *MockDbi) Authorise(arg0, arg1, arg2 int, arg3 string) (int, models.ApiError) {
	ret := m.ctrl.Call(m, "Authorise", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// Authorise indicates an expected call of Authorise
func (mr *MockDbiMockRecorder) Authorise(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorise", reflect.TypeOf((*MockDbi)(nil).Authorise), arg0, arg1, arg2, arg3)
}

// Capture mocks base method
func (m *MockDbi) Capture(arg0, arg1 int) (int, models.ApiError) {
	ret := m.ctrl.Call(m, "Capture", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// Capture indicates an expected call of Capture
func (mr *MockDbiMockRecorder) Capture(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capture", reflect.TypeOf((*MockDbi)(nil).Capture), arg0, arg1)
}

// Close mocks base method
func (m *MockDbi) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDbiMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDbi)(nil).Close))
}

// GetCard mocks base method
func (m *MockDbi) GetCard(arg0 int) (models.Card, models.ApiError) {
	ret := m.ctrl.Call(m, "GetCard", arg0)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard
func (mr *MockDbiMockRecorder) GetCard(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockDbi)(nil).GetCard), arg0)
}

// GetCustomer mocks base method
func (m *MockDbi) GetCustomer(arg0 int) (models.Customer, models.ApiError) {
	ret := m.ctrl.Call(m, "GetCustomer", arg0)
	ret0, _ := ret[0].(models.Customer)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// GetCustomer indicates an expected call of GetCustomer
func (mr *MockDbiMockRecorder) GetCustomer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomer", reflect.TypeOf((*MockDbi)(nil).GetCustomer), arg0)
}

// GetCustomers mocks base method
func (m *MockDbi) GetCustomers() ([]models.Customer, models.ApiError) {
	ret := m.ctrl.Call(m, "GetCustomers")
	ret0, _ := ret[0].([]models.Customer)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// GetCustomers indicates an expected call of GetCustomers
func (mr *MockDbiMockRecorder) GetCustomers() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomers", reflect.TypeOf((*MockDbi)(nil).GetCustomers))
}

// GetVendor mocks base method
func (m *MockDbi) GetVendor(arg0 int) (models.Vendor, models.ApiError) {
	ret := m.ctrl.Call(m, "GetVendor", arg0)
	ret0, _ := ret[0].(models.Vendor)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// GetVendor indicates an expected call of GetVendor
func (mr *MockDbiMockRecorder) GetVendor(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendor", reflect.TypeOf((*MockDbi)(nil).GetVendor), arg0)
}

// GetVendors mocks base method
func (m *MockDbi) GetVendors() ([]models.Vendor, models.ApiError) {
	ret := m.ctrl.Call(m, "GetVendors")
	ret0, _ := ret[0].([]models.Vendor)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// GetVendors indicates an expected call of GetVendors
func (mr *MockDbiMockRecorder) GetVendors() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVendors", reflect.TypeOf((*MockDbi)(nil).GetVendors))
}

// Ping mocks base method
func (m *MockDbi) Ping() models.ApiError {
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(models.ApiError)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockDbiMockRecorder) Ping() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDbi)(nil).Ping))
}

// Refund mocks base method
func (m *MockDbi) Refund(arg0, arg1 int, arg2 string) (int, models.ApiError) {
	ret := m.ctrl.Call(m, "Refund", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// Refund indicates an expected call of Refund
func (mr *MockDbiMockRecorder) Refund(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockDbi)(nil).Refund), arg0, arg1, arg2)
}

// Reverse mocks base method
func (m *MockDbi) Reverse(arg0, arg1 int, arg2 string) (int, models.ApiError) {
	ret := m.ctrl.Call(m, "Reverse", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// Reverse indicates an expected call of Reverse
func (mr *MockDbiMockRecorder) Reverse(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reverse", reflect.TypeOf((*MockDbi)(nil).Reverse), arg0, arg1, arg2)
}

// TopUp mocks base method
func (m *MockDbi) TopUp(arg0, arg1 int, arg2 string) (int, models.ApiError) {
	ret := m.ctrl.Call(m, "TopUp", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(models.ApiError)
	return ret0, ret1
}

// TopUp indicates an expected call of TopUp
func (mr *MockDbiMockRecorder) TopUp(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopUp", reflect.TypeOf((*MockDbi)(nil).TopUp), arg0, arg1, arg2)
}
